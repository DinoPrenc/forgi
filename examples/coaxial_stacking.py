from __future__ import print_function, absolute_import, division, unicode_literals
from builtins import (ascii, bytes, chr, dict, filter, hex, input,
                      map, next, oct, open, pow, range, round,
                      str, super, zip) 



import argparse, random, math

import forgi.threedee.model.coarse_grain as ftmc
import forgi.threedee.utilities.dssr as ftud

def generateParser():
    parser=argparse.ArgumentParser( description="Report coaxial stacking.")
    parser.add_argument("files", type=str, nargs="+", help="One or more cg files that all have the same bulge graph!")
    parser.add_argument("--dssr-json", type=str, nargs="*", help="One or more json files generated by x3dna-dssr. They have to be in the same order as the cg files.")
    parser.add_argument("-q", "--quiet", action="store_true", help="Do not be so verbose!!!")
    parser.add_argument("-m", "--method", type=str, help="'CG' or 'Tyagi'. Method used for stacking detection in forgi.", default="Tyagi")
    return parser

parser = generateParser()
if __name__=="__main__":
    args = parser.parse_args()
    if args.dssr_json and len(args.dssr_json)!=len(args.files):
        parser.error( '--dssr-json must have the same number of arguments as files.' )
    forgi_count = 0
    forgi_not_stacking = 0
    both_count = 0
    dssr_count = 0
    for i, filename in enumerate(args.files):
        if not args.quiet: print("=== FILE ", filename, args.dssr_json[i], " ===")
        cg = ftmc.CoarseGrainRNA(filename)
        try:
            annot = ftud.DSSRAnnotation(args.dssr_json[i], cg)
            #assert "coaxStacks" in annot._dssr, "{}".format(annot._dssr)
        except LookupError:
            for d in cg.defines:
                if d[0] in "mi" and cg.is_stacking(d):
                    print (cg.connections(d), "stack along", d)
        else:
            #annot.compare_dotbracket()
            annot.basepair_stacking(args.method)
            continue
            forgi, dssr = annot.compare_coaxial_stack_annotation(args.method)
            both = forgi & dssr
            forgi = forgi - both
            dssr = dssr - both
            dssr_count+=len(dssr)
            forgi_count+=len(forgi)
            forgi_not_stacking += len(list(f for f in dssr if f.forgi=="not stacking"))
            both_count+=len(both)
            if not args.quiet: 
                print ("{} found by forgi, {} by dssr, {} by both".format(len(forgi), len(dssr), len(both)))
                for f in forgi:
                    print ("{} and {} stacking in forgi".format(f.stems[0], f.stems[1]))
                for d in dssr:
                    print ("{} and {} stacking in dssr (in forgi {})".format(d.stems[0], d.stems[1], d.forgi))
                for b in both:
                    print ("{} and {} stacking in both".format(b.stems[0], b.stems[1]))
    print("======= SUMMARY ======")
    if args.dssr_json:
        total_count = forgi_count + dssr_count + both_count
        if total_count:
            print ("forgi found {}, dssr {}, thereof both {} of all stacks (Forgi not stacking: {})".format(
                                                  (forgi_count+both_count),
                                                  (dssr_count+both_count),
                                                  (both_count),
                                                  (forgi_not_stacking)))
            print ("forgi found {}%, dssr {}%, thereof both {}% of all stacks (Forgi not stacking: {}%)".format(
                                                  int((forgi_count+both_count)/total_count*100),
                                                  int((dssr_count+both_count)/total_count*100),
                                                  int((both_count)/total_count*100),
                                                  int((forgi_not_stacking)/total_count*100)))
        else:
            print("No coaxial stacks found")
